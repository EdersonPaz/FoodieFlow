name: 'Linter - Build - Test - Docker Deploy'

on:
  push:
    branches: [ "main" ]
    tags:
      - '*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.12
      uses: actions/setup-python@v1
      with:
        python-version: 3.12
    - name: Install dependencies
      run: |
        echo ${{ github.base_ref }}
        python -m pip install --upgrade pip
        pip install pylint black flake8 isort autoflake
    - name: Run Black
      run: black --check .
    - name: Run Flake8
      run: flake8 --count .
    - name: Run AutoFlake
      run: autoflake --remove-all-unused-imports --remove-unused-variables --in-place --recursive . --exclude=app/core/model/orm

  build:
    needs: linter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push
        id: docker-build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/ecr-${{ secrets.PROJECT_NAME }}:v7
      - name: Set up kubeconfig
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Install and configure kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
      - name: Deploy to EKS
        run: |
          kubectl set image deployment/foodieflow foodieflow=${{ steps.login-ecr.outputs.registry }}/ecr-${{ secrets.PROJECT_NAME }}:v7